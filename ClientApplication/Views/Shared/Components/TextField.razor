@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web;

<label for="@this.ItemId" class="form-label">@this.LabelTitle:</label>
<div class="@((this.GroupIcon != null ? "input-group" : "")) has-validation">
    @if(this.GroupIcon != null)
    {
        <span class="input-group-text"><i class="@this.GroupIcon"></i></span>
    }
    <input id="@this.ItemId" class="form-control @((this.IsValid ? "" : "is-invalid"))" maxlength="@this.MaxLength" 
        placeholder="@this.Placeholder" type="@this.InputType" value="@this.componentValue" 
        @onchange="@this.ChangeValue" readonly="@this.IsReadonly"/>
</div>

@code {
    [ParameterAttribute] public string LabelTitle { get; set; } = string.Empty;
    [ParameterAttribute] public string ItemId { get; set; } = string.Empty;

    [ParameterAttribute] public string? GroupIcon { get; set; } = default;
    [ParameterAttribute] public string Placeholder { get; set; } = string.Empty;
    [ParameterAttribute] public string InputType { get; set; } = "text";

    [ParameterAttribute] public bool IsReadonly { get; set; } = default;
    [ParameterAttribute] public int MaxLength { get; set; } = 30;
    [ParameterAttribute] public bool IsValid { get; set; } = true;

    protected string componentValue = string.Empty;
    [ParameterAttribute] public string ComponentValue
    {
        get => this.componentValue; set { this.componentValue = value; }
    }
    [ParameterAttribute] public EventCallback<string> ComponentValueChanged { get; set; }

    private async Task ChangeValue(ChangeEventArgs args)
    {
        this.componentValue = args.Value!.ToString()!;
        await this.ComponentValueChanged.InvokeAsync(componentValue);
    }
}
