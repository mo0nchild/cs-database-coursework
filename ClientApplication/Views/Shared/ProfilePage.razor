@using DAModels = DatabaseAccess.Models;
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web;
@using ViewModels;
@using ClientApplication.Views.Shared.Components;

@inject NavigationManager NavigationManager
@inject ILogger<ProfilePage> Logger
@inject IHttpClientFactory HttpFactory

<div class="container p-0">
    @if(this.ErrorMessage != null)
    {
    <div class="mb-4 alert alert-danger alert-dismissible fade show" role="alert" style="border-radius:16px;">
        <i class="bi bi-exclamation-triangle-fill"></i>
        <strong>Уведомление!</strong>&nbsp;@this.ErrorMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
    }
    <div class="row mb-4 justify-content-md-between">

        <div class="col-md-3 col-12 mb-4">
            <div class="shadow border border-secondary p-4" style="border-radius: 16px;">

                <div class="d-md-none mb-3">
                    <button class="btn btn-primary w-100" data-bs-toggle="collapse" data-bs-target="#collapseGroup"
                        style="background-color:transparent;border-color:var(--main-color);color:var(--main-color);">
                        Показать разделы настройки
                    </button>
                    <div class="collapse" id="collapseGroup">
                        <div class="card card-body py-4"> <SettingsTabs @bind-ComponentValue="@this.SelectedTab"/></div>
                    </div>
                </div>
                <div class="d-sm-none d-none d-md-block mb-3">
                    <SettingsTabs @bind-ComponentValue="@this.SelectedTab" />
                </div>
                @if(this.SetDatingType == true)
                {
                <div class="mb-3">
                    <TextSelect ItemId="typeofdating" @bind-ComponentValue="@this.DatingType.Typeofdating" 
                        LabelTitle="Тип знакомства" GroupIcon="bi bi-diagram-3-fill"
                        ElementList="this.EditingModel.Datingtypes.Select(item => item.Typeofdating).ToList()"/>
                </div>
                }
                <ModalDialog ButtonText="Сохранить" FormRequestLink="@this.FormRequestLink">
                @*@if(this.IsReadonly != true)
                {*@
                    <input type="hidden" name="id" value="@this.Contact.Contactid"/>
                    <input type="hidden" name="surname" value="@this.Contact.Surname"/>
                    <input type="hidden" name="name" value="@this.Contact.Name"/>
                    <input type="hidden" name="validate" value="true"/>

                    <input type="hidden" name="patronymic" value="@this.Contact.Patronymic"/>
                    <input type="hidden" name="email" value="@this.Contact.Emailaddress"/>
                    @if(this.Contact.Phonenumber != "" && this.Contact.Phonenumber != null)
                    { <input type="hidden" name="phone" value="@this.Contact.Phonenumber"/> }

                    <input type="hidden" name="family" value="@this.Contact.Familystatus"/>
                    <input type="hidden" name="birthday" value="@this.Contact.Birthday"/>
                    <input type="hidden" name="gender" value="@this.Contact.Gendertype.Gendertypename"/>
                    <input type="hidden" name="picture" value="@this.Contact.Userpicture!.Filepath"/>

                    @if(this.Contact.Location!.City.Cityname != "Не установлено")
                    {
                        <input type="hidden" name="city" value="@this.Contact.Location!.City.Cityname"/>
                        <input type="hidden" name="country" value="@this.Contact.Location!.City.Country"/>
                        <input type="hidden" name="street" value="@this.Contact.Location!.Street"/>
                    }
                    <input type="hidden" name="employee_length" value="@this.Contact.Employees.Count()"/>
                    @for(var index = 0; index < this.Contact.Employees.Count(); index++)
                    {
                        <input type="hidden" name="employee[@index].company" 
                            value="@this.Contact.Employees.ElementAt(index).Companyname"/>
                        <input type="hidden" name="employee[@index].post" 
                            value="@this.Contact.Employees.ElementAt(index).Post!.Postname"/>
                        <input type="hidden" name="employee[@index].status" 
                            value="@this.Contact.Employees.ElementAt(index).Status"/>
                    }
                    <input type="hidden" name="hobby_length" value="@this.Contact.Hobbies.Count()"/>
                    @for(var index = 0; index < this.Contact.Hobbies.Count(); index++)
                    {
                        <input type="hidden" name="hobby[@index]" 
                            value="@this.Contact.Hobbies.ElementAt(index).Hobbyname"/>
                    }
                    <input type="hidden" name="quality_length" value="@this.Contact.Humanqualities.Count()"/>
                    @for(var index = 0; index < this.Contact.Humanqualities.Count(); index++)
                    {
                        <input type="hidden" name="quality[@index]" 
                            value="@this.Contact.Humanqualities.ElementAt(index).Qualityname"/>
                    }
                @*}*@
                    @if(this.SetDatingType) 
                    { <input type="hidden" name="datingType" value="@this.DatingType.Typeofdating"/> }
                </ModalDialog>
                @if(this.IsReadonly != true)
                { <a class="btn btn btn-outline-danger mt-2 w-100" role="button" href="/user/deletecontact/@(this.Contact.Contactid)">Удалить</a> }
            </div>
        </div>
        <div class="col-md-9 col-12">
            <div class="shadow border border-secondary p-4" style="border-radius: 16px;">
                <label class="form-label mb-2 fs-5 fw-semibold" style="color:var(--main-color);">
                    Просмотр информации контакта:
                </label>
               @* <div class="form-text mb-2 text-danger">
                    &nbsp @if(this.ErrorMessage != null) { <text>@(this.ErrorMessage)</text> } 
                </div>*@
            @switch(this.SelectedTab)
            {
            case SelectedTabType.Details:
            <div class="row mb-3">
                <div class="col-12 col-lg-4 col-md-6">
                    <TextField ItemId="contact-surname" LabelTitle="Фамилия" @bind-ComponentValue="@this.Contact.Surname"
                        Placeholder="Ваша фамилия" IsValid="@(this.ErrorMessage == null)" IsReadonly="@this.IsReadonly"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <TextField ItemId="contact-name" LabelTitle="Имя" @bind-ComponentValue="@this.Contact.Name"
                        Placeholder="Ваше имя" IsValid="@(this.ErrorMessage == null)" IsReadonly="@this.IsReadonly"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <TextField ItemId="contact-patronymic" LabelTitle="Отчество" @bind-ComponentValue="@this.Contact.Patronymic"
                        Placeholder="Ваше отчество" IsValid="@(this.ErrorMessage == null)" IsReadonly="@this.IsReadonly"/>
                </div>
                <div class="form-text">Диапазон вводимых символов от 5 до 30 знаков</div>
            </div>
            <div class="row mb-3">
                <div class="col-12 col-md-6">
                    <TextField ItemId="contact-phone" LabelTitle="Телефон" @bind-ComponentValue="@this.Contact.Phonenumber"
                        Placeholder="Пример: +79001001010" GroupIcon="bi bi-telephone-forward" MaxLength="12"
                        IsValid="@(this.ErrorMessage == null)" IsReadonly="@this.IsReadonly"/>
                    <div class="form-text">Диапазон вводимых символов 12 знаков</div>
                </div>
                <div class="col-12 col-md-6">
                    <TextField ItemId="contact-email" LabelTitle="Email" @bind-ComponentValue="@this.Contact.Emailaddress"
                        Placeholder="Пример: example@gmail.com" GroupIcon="bi bi-mailbox2" MaxLength="100"
                        IsValid="@(this.ErrorMessage == null)" IsReadonly="@this.IsReadonly"/>
                    <div class="form-text">Диапазон вводимых символов от 10 до 100 знаков</div>
                </div>
                <div class="col-md-12 col-12 bg-secondary mt-4 my-st-4" style="height:1px;"></div>
                
            </div>
            <div class="row mb-3">
                <div class="col-12 col-lg-4 col-md-6">
                    <TextSelect ItemId="contact-gender" @bind-ComponentValue="@this.Contact.Gendertype.Gendertypename" 
                        LabelTitle="Пол" GroupIcon="bi bi-universal-access-circle" IsReadonly="@this.IsReadonly"
                        ElementList="this.EditingModel.GenderTypes.Select(item => item.Gendertypename).ToList()"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <TextSelect ItemId="contact-family" @bind-ComponentValue="@this.Contact.Familystatus" 
                        LabelTitle="Семейный статус" GroupIcon="bi bi-people-fill" IsReadonly="@this.IsReadonly"
                        ElementList="@((new [] { "В браке", "В поиске", "Холост", "Все сложно", "Не указывать" }).ToList())"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <label for="birthday" class="form-label">День рождения:</label>
                    <input id="birthday" class="form-control" type="date" name="birthday" @bind-value="this.Contact.Birthday"
                        readonly="@this.IsReadonly"/>
                </div>
            </div>
            <div class="row mb-3">
                <label for="user-picture" class="form-label">Аватарка:</label>
                <div class="col-6 col-lg-4 col-md-6 gx-4" id="user-picture">
                    <select class="form-select" size="3" @onchange="this.UserPictureChangeHandler" style="height:100px"
                        disabled="@this.IsReadonly">
                    @foreach(var item in this.EditingModel.Pictures) 
                    {
                        @if(item.Filepath != this.Contact.Userpicture!.Filepath) { <option value="@item.Filepath">@item.Picturename</option> }
                        else { <option value="@item.Filepath" selected>@item.Picturename</option> }
                    }
                    </select>
                </div>
                <div class="col-6 col-lg-4 col-md-6">
                    <img src="@(this.Contact.Userpicture?.Filepath)" class="rounded img-thumbnail" 
                        style="width:100px;height:100px;">
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12 col-lg-4 col-md-6">
                    <label for="contact-country" class="form-label">Страна:</label>
                    <div class="input-group has-validation">

                        <span class="input-group-text"><i class="bi bi-globe"></i></span>
                        <input class="form-control" type="text" @bind="@this.ContactCountry" readonly/>
                    </div>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <TextSelect ItemId="contact-city" @bind-ComponentValue="this.ContactLocation"
                        LabelTitle="Город" GroupIcon="bi bi-buildings" IsReadonly="@this.IsReadonly"
                        ElementList="this.EditingModel.Cities.Select(item => item.Cityname).ToList()"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <TextField ItemId="contact-street" LabelTitle="Улица" @bind-ComponentValue="@this.Contact.Location!.Street"
                         Placeholder="Ваша улица" GroupIcon="bi bi-signpost-2" MaxLength="50" IsValid="@(this.ErrorMessage == null)"
                         IsReadonly="@this.IsReadonly"/>
                    <div class="form-text">Диапазон вводимых символов от 5 до 50 знаков</div>
                </div>
            </div>
                break;
            case SelectedTabType.Employee:
            <div class="row mb-3">
                <div class="col-12 col-lg-4 col-md-6">
                    <TextField ItemId="contact-company" LabelTitle="Название компании" Placeholder="Название вашей компании"
                         @bind-ComponentValue="@this.CurrentEmployee.Companyname" IsValid="@this.CurrentEmployeeIsValid"
                         GroupIcon="bi bi-journal-bookmark-fill" MaxLength="50" IsReadonly="@this.IsReadonly"/>
                    <div class="form-text">Диапазон вводимых символов от 5 до 50 знаков</div>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <TextSelect ItemId="contact-city" @bind-ComponentValue="@this.CurrentEmployee.Post!.Postname"
                        LabelTitle="Должность" GroupIcon="bi bi-person-video2" IsReadonly="@this.IsReadonly"
                        ElementList="this.EditingModel.Postes.Select(item => item.Postname).ToList()"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6">
                    <TextSelect ItemId="contact-status" @bind-ComponentValue="@this.CurrentEmployee.Status"
                        LabelTitle="Рабочий статус" GroupIcon="bi bi-link" IsReadonly="@this.IsReadonly"
                        ElementList="@(new() { "Не указывать", "Работает", "Уволен" })"/>
                </div>
            </div> 
            <div class="row mb-3">
                <div class="col-12 mb-3">
                    <label for="contact-emploees" class="form-label">Рабочие места:</label>
                    <div class="card card-body" id="contact-emploees"> 
                        <ul class="list-group" style="overflow:scroll;max-height:160px;">
                        @foreach(var item in this.Contact.Employees)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <label class="form-check-label" for="firstRadio">
                                    @($"{item.Companyname} / {item.Post!.Postname} - {item.Status}")
                                </label>
                                <button type="button" class="btn-close" 
                                    @onclick="@(value => { if(!this.IsReadonly) this.Contact.Employees.Remove(item); })" />
                            </li>
                        }
                        </ul>
                    </div>
                </div>
                <div class="col-12 col-lg-6 col-md-6 col-xl-4">
                    <button style="background-color:var(--main-color);border-color:var(--main-color)" 
                        class="btn btn-success w-100" @onclick="@EmployeeClickHandler">Добавить запись</button>
                </div>
            </div>
                break;
            case SelectedTabType.QualityHobby:
            <div class="row mb-3">
                <div class="col-12 col-lg-4 col-md-6 mb-3">
                    <TextSelect ItemId="contact-hobby" @bind-ComponentValue="@this.CurrentHobbyValue"
                        LabelTitle="Название хобби" GroupIcon="bi bi-gift" IsReadonly="@this.IsReadonly"
                        ElementList="@(this.EditingModel.HobbyTypes.Select(item => item.Hobbyname).ToList())"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6 mb-3">
                    <label for="contact-hobby" class="form-label">Тип хобби:</label>
                    <div class="input-group has-validation">

                        <span class="input-group-text"><i class="bi bi-file-bar-graph-fill"></i></span>
                        <input class="form-control" type="text" @bind="@this.CurrentHobby.Hobbytype" readonly/>
                    </div>
                </div>
                <div class="col-12 col-lg-4 col-md-6 mb-3">
                    <label for="contact-hobby" class="form-label">&nbsp</label>

                    <button style="background-color:var(--main-color);border-color:var(--main-color)" 
                        class="btn btn-success w-100" @onclick="@HobbyClickHandler">Добавить запись</button>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12 mb-3">
                    <label for="contact-hobby" class="form-label">Список хобби:</label>
                    <div class="card card-body" id="contact-hobby"> 
                        <ul class="list-group" style="overflow:scroll;max-height:160px;">
                        @foreach(var item in this.Contact.Hobbies)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <label class="form-check-label" for="firstRadio"> @($"{item.Hobbyname} / {item.Hobbytype}")</label>
                                <button type="button" class="btn-close" 
                                    @onclick="@(value => { if(!this.IsReadonly) this.Contact.Hobbies.Remove(item); })" />
                            </li>
                        }
                        </ul>
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12 col-lg-4 col-md-6 mb-3">
                    <TextSelect ItemId="contact-quality" @bind-ComponentValue="@this.CurrentQualityValue"
                        LabelTitle="Челоческое качество" GroupIcon="bi bi-emoji-smile-fill" IsReadonly="@this.IsReadonly"
                        ElementList="@(this.EditingModel.QualityTypes.Select(item => item.Qualityname).ToList())"/>
                </div>
                <div class="col-12 col-lg-4 col-md-6 mb-3">
                    <label for="contact-qualitytype" class="form-label">Тип качества:</label>
                    <div class="input-group has-validation">

                        <span class="input-group-text"><i class="bi bi-file-bar-graph-fill"></i></span>
                        <input class="form-control" type="text" @bind="@this.CurrentQuality.Qualitytype" readonly/>
                    </div>
                </div>
                <div class="col-12 col-lg-4 col-md-6 mb-3">
                    <label for="contact-qualitytype" class="form-label">&nbsp</label>

                    <button style="background-color:var(--main-color);border-color:var(--main-color)" 
                        class="btn btn-success w-100" @onclick="@QualityClickHandler">Добавить запись</button>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12 mb-3">
                    <label for="contact-quality" class="form-label">Список человеческих качеств:</label>
                    <div class="card card-body" id="contact-quality"> 
                        <ul class="list-group" style="overflow:scroll;max-height:160px;">
                        @foreach(var item in this.Contact.Humanqualities)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <label class="form-check-label" for="firstRadio">@($"{item.Qualityname} / {item.Qualitytype}")</label>
                                <button type="button" class="btn-close"
                                    @onclick="@(value => { if(!this.IsReadonly) this.Contact.Humanqualities.Remove(item); })" />
                            </li>
                        }
                        </ul>
                    </div>
                </div>
            </div>
                break;
            }   
            </div>
        </div>

    </div>
</div>
@code {
    [ParameterAttribute] public DAModels::Contact Contact { get; set; } = default!;
    [ParameterAttribute] public ProfileEditingModel EditingModel { get; set; } = default!;

    [ParameterAttribute] public string? ErrorMessage { get; set; } = default!;
    [ParameterAttribute] public bool IsReadonly { get; set; } = default!;
    [ParameterAttribute] public bool SetDatingType { get; set; } = default!;

    [ParameterAttribute, EditorRequiredAttribute]
    public string FormRequestLink { get; set; } = default!;

    public enum SelectedTabType : sbyte { Details, Employee, QualityHobby  }
    public SelectedTabType SelectedTab { get; set; } = default;

    protected virtual void UserPictureChangeHandler(ChangeEventArgs args)
    {
        this.Contact.Userpicture = new DAModels::Userpicture() { Filepath = args.Value?.ToString() ?? "" };
        this.Logger.LogInformation($"Picture: {args.Value?.ToString()}");
    }
    protected string ContactCountry
    {
        get => this.Contact.Location!.City.Country; set { this.Contact.Location!.City.Country = value; }
    }
    protected string ContactLocation
    {
        get => this.Contact.Location!.City.Cityname; 
        set { 
            this.Contact.Location!.City = new DAModels::City()
            {
                Country = this.EditingModel.Cities.First(item => item.Cityname == value).Country,
                Cityname = value,
            };
            this.Logger.LogInformation($"City: {ContactLocation}; Country: {this.Contact.Location!.City.Country}");
        }
    }
    [ParameterAttribute]
    public virtual DAModels::Datingtype DatingType { get; set; } = default!;

    protected virtual bool CurrentEmployeeIsValid { get; set; } = true;
    protected DAModels::Employee CurrentEmployee { get; set; } = default!;

    protected virtual void EmployeeClickHandler() 
    {
        if (this.IsReadonly) return;
        var validation = this.Contact.Employees.Where(item => item.Companyname == this.CurrentEmployee.Companyname
            && item.Post!.Postname == this.CurrentEmployee.Post!.Postname).Count() <= 0;

        if (this.CurrentEmployee.Companyname.Length < 5 || !validation) { CurrentEmployeeIsValid = false; return; }
        this.Contact.Employees.Add(new DAModels::Employee()
        {
            Companyname = this.CurrentEmployee.Companyname, Status = this.CurrentEmployee.Status, 
            Post = new() { Postname = this.CurrentEmployee.Post!.Postname } 
        });
        this.CurrentEmployeeIsValid = true;
    }
    protected DAModels::Humanquality CurrentQuality { get; set; } = default!;
    private string CurrentQualityValue
    {
        get => this.CurrentQuality.Qualityname;
        set {
            this.CurrentQuality = new DAModels::Humanquality()
            {
                Qualitytype = this.EditingModel.QualityTypes.First(item => item.Qualityname == value).Qualitytype,
                Qualityname = value,
            };
            this.Logger.LogInformation($"Quality: {CurrentQuality.Qualityname}; Type: {CurrentQuality.Qualitytype}");
        }
    }
    protected virtual void QualityClickHandler() 
    {
        if (this.IsReadonly) return;
        if(this.Contact.Humanqualities.Where(item => item.Qualityname == this.CurrentQualityValue).Count() <= 0)
        {
            this.Contact.Humanqualities.Add(new DAModels::Humanquality()
            { Qualityname = this.CurrentQualityValue, Qualitytype = this.CurrentQuality.Qualitytype });
        }
    }

    protected DAModels::Hobby CurrentHobby { get; set; } = default!;
    private string CurrentHobbyValue
    {
        get => this.CurrentHobby.Hobbyname;
        set {
            this.CurrentHobby = new DAModels::Hobby()
            {
                Hobbytype = this.EditingModel.HobbyTypes.First(item => item.Hobbyname == value).Hobbytype,
                Hobbyname = value,
            };
            this.Logger.LogInformation($"Hobby: {CurrentHobby.Hobbyname}; Type: {CurrentHobby.Hobbytype}");
        }
    }
    protected virtual void HobbyClickHandler() 
    {
        if (this.IsReadonly) return;
        if(this.Contact.Hobbies.Where(item => item.Hobbyname == this.CurrentHobbyValue).Count() <= 0)
        {
            this.Contact.Hobbies.Add(new DAModels::Hobby()
            { Hobbyname = this.CurrentHobbyValue, Hobbytype = this.CurrentHobby.Hobbytype });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        this.EditingModel.Cities.Insert(0, new() { Cityname = "Не установлено", Country = "Не установлено" });

        this.Contact.Location ??= new DAModels.Location() { City = this.EditingModel.Cities[0] };
        this.CurrentEmployee = new DAModels::Employee() 
        { 
            Post = new() { Postname = this.EditingModel.Postes.First().Postname },
            Companyname = string.Empty, Status = "Не указывать", 
        };
        this.CurrentQuality = this.EditingModel.QualityTypes.First();
        this.CurrentHobby = this.EditingModel.HobbyTypes.First();

        this.DatingType ??= this.EditingModel.Datingtypes.First();
        this.Logger.LogInformation($"OnInitializedAsync was called");
    }
}