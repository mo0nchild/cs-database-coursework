@using ClientApplication.Views.Shared;
@using System.Security.Claims;
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@model ClientApplication.ViewModels.UserContactsModel
@{
    this.ViewBag.Title = "Просмотр контакта";
    const UserProfileModel.PageMode contactMode = UserProfileModel.PageMode.Contacts;
    
    var profileId = int.Parse(this.Context.User.FindFirst(ClaimTypes.PrimarySid)!.Value);
}
<div class="container p-0 mt-5 mb-4">
    <div class="row shadow-sm border border-secondary p-3 mx-1 mb-4" style="border-radius:12px;">
        <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">

            <ol class="breadcrumb m-0 flex-nowrap" style="overflow:hidden;white-space:nowrap;text-overflow:ellipsis">
                <li class="breadcrumb-item fs-5" style="color:var(--main-color);">
                    <i class="bi bi-people"></i>&nbsp;Контакты
                </li>
                <li class="breadcrumb-item fs-5 active flex-grow-1">
                    @this.Model.Contact.Name&nbsp;@this.Model.Contact.Surname
                </li>
            </ol>
        </nav>
    </div>
    @if (this.Model.IsAccount)
    {
    <div class="row mx-1 mb-4">
        <div class="col-12 col-md-6">
            <div class="shadow-sm border border-secondary p-3 mb-4 mb-md-0" style="border-radius:12px;">
                <label class="form-label mb-2 fs-5 fw-semibold" style="color:var(--main-color);">
                    <i class="bi bi-clipboard-check"></i>&nbsp;Список связанных контактов:
                </label>
                @await this.Component.InvokeAsync("ContactFriends", new { profileId = this.Model.Contact.Contactid })
            </div>
        </div>
        <div class="col-12 col-md-6">
            @*<div class="shadow-sm border border-secondary p-3 d-flex flex-column h-100" 
                style="border-radius:12px;">
                <label class="form-label mb-2 fs-5 fw-semibold" style="color:var(--main-color);">
                    <i class="bi bi-chat-dots"></i>&nbsp;Список сообщений:
                </label>
                @await this.Component.InvokeAsync("FriendMessages", new { profileId = this.Model.Contact.Contactid })
                @using(this.Html.BeginForm("TextMessage", "UserContacts", FormMethod.Post, 
                    new { @class="d-flex flex-row my-3 " }))
                {
                <input type="hidden" name="friend" value="@this.Model.SelectedContact"/>
                <div class="input-group">
                    <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                    <input type="text" name="text" class="form-control" placeholder="Username"/>
                </div>
                <input type="submit" class="btn btn-success mx-2" value="Отправить"
                    style="background-color:var(--main-color);border-color:var(--main-color);"/>
                }    
            </div>*@
            <component type="typeof(ContactMessager)" render-mode="ServerPrerendered" param-Contactid="this.Model.Contact.Contactid"
                param-Profileid="profileId" param-ContactName="this.Model.Contact.Name"/>
        </div>
    </div>
    
    }
</div>
<div class="mb-5">
<component type="typeof(ProfilePage)" render-mode="ServerPrerendered" param-Contact="this.Model.Contact"
    param-ErrorMessage="this.Model.ErrorMessage" param-SetDatingType="true" param-FormRequestLink="this.Model.FormRequestLink" 
    param-IsReadonly="@this.Model.IsAccount" param-DatingType="@this.Model.DatingType"/>
</div>
@section Scripts {
    <script src="/_framework/blazor.server.js"></script>
    <script type="text/javascript">
        function scrollToBottom() {
            var objDiv = document.getElementById("messanger"); objDiv.scrollTop = objDiv.scrollHeight;
        }
        scrollToBottom();
    </script>
}
@section Supports {
<ul class="navbar-nav my-3 my-sm-0 my-lg-0 navbar-nav-scroll" 
    style="--bs-scroll-height:84px;font-size:13pt;"> 
    <li class="nav-item">
        @this.Html.ActionLink("В главное меню", "ProfileInfo", "UserProfile", new UserProfileModel { Mode = contactMode },
            new { @class=$"nav-link text-light border-bottom border-3" })
    </li>
</ul>
<div class="vr mx-3 bg-white opacity-75 d-none d-md-block" style="width:2px;"></div>
<div class="d-flex flex-row my-2 my-md-0 mb-3 mb-md-0 align-items-center">
    @await this.Component.InvokeAsync("ProfileIcon")
    <a class="btn btn-danger mx-2 flex-grow-1" style="height:40px;" href="~/logout" role="button">
        <i class="bi bi-door-open"></i>&nbsp;Выйти
    </a>
</div>
}